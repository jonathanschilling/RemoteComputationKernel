// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remoteComputationKernel.proto

#include "remoteComputationKernel.pb.h"
#include "remoteComputationKernel.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rck {

static const char* RemoteComputationKernel_method_names[] = {
  "/rck.RemoteComputationKernel/Reset",
  "/rck.RemoteComputationKernel/AlocVar",
  "/rck.RemoteComputationKernel/FreeVar",
  "/rck.RemoteComputationKernel/SendInt",
  "/rck.RemoteComputationKernel/SendFlt",
  "/rck.RemoteComputationKernel/SendDbl",
  "/rck.RemoteComputationKernel/RecvInt",
  "/rck.RemoteComputationKernel/RecvFlt",
  "/rck.RemoteComputationKernel/RecvDbl",
};

std::unique_ptr< RemoteComputationKernel::Stub> RemoteComputationKernel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteComputationKernel::Stub> stub(new RemoteComputationKernel::Stub(channel));
  return stub;
}

RemoteComputationKernel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Reset_(RemoteComputationKernel_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlocVar_(RemoteComputationKernel_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreeVar_(RemoteComputationKernel_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendInt_(RemoteComputationKernel_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendFlt_(RemoteComputationKernel_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDbl_(RemoteComputationKernel_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvInt_(RemoteComputationKernel_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvFlt_(RemoteComputationKernel_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecvDbl_(RemoteComputationKernel_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RemoteComputationKernel::Stub::Reset(::grpc::ClientContext* context, const ::rck::ResetRequest& request, ::rck::ResetResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::rck::ResetRequest* request, ::rck::ResetResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::ResetResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::rck::ResetRequest* request, ::rck::ResetResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::ResetResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::ResetResult>* RemoteComputationKernel::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::rck::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::ResetResult>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::ResetResult>* RemoteComputationKernel::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::rck::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::ResetResult>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::AlocVar(::grpc::ClientContext* context, const ::rck::AlocVarRequest& request, ::rck::AlocVarResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AlocVar_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::AlocVar(::grpc::ClientContext* context, const ::rck::AlocVarRequest* request, ::rck::AlocVarResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlocVar_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::AlocVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::AlocVarResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AlocVar_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::AlocVar(::grpc::ClientContext* context, const ::rck::AlocVarRequest* request, ::rck::AlocVarResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlocVar_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::AlocVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::AlocVarResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AlocVar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::AlocVarResult>* RemoteComputationKernel::Stub::AsyncAlocVarRaw(::grpc::ClientContext* context, const ::rck::AlocVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::AlocVarResult>::Create(channel_.get(), cq, rpcmethod_AlocVar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::AlocVarResult>* RemoteComputationKernel::Stub::PrepareAsyncAlocVarRaw(::grpc::ClientContext* context, const ::rck::AlocVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::AlocVarResult>::Create(channel_.get(), cq, rpcmethod_AlocVar_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::FreeVar(::grpc::ClientContext* context, const ::rck::FreeVarRequest& request, ::rck::FreeVarResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FreeVar_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::FreeVar(::grpc::ClientContext* context, const ::rck::FreeVarRequest* request, ::rck::FreeVarResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FreeVar_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::FreeVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::FreeVarResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FreeVar_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::FreeVar(::grpc::ClientContext* context, const ::rck::FreeVarRequest* request, ::rck::FreeVarResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FreeVar_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::FreeVar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::FreeVarResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FreeVar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::FreeVarResult>* RemoteComputationKernel::Stub::AsyncFreeVarRaw(::grpc::ClientContext* context, const ::rck::FreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::FreeVarResult>::Create(channel_.get(), cq, rpcmethod_FreeVar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::FreeVarResult>* RemoteComputationKernel::Stub::PrepareAsyncFreeVarRaw(::grpc::ClientContext* context, const ::rck::FreeVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::FreeVarResult>::Create(channel_.get(), cq, rpcmethod_FreeVar_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::SendInt(::grpc::ClientContext* context, const ::rck::SendIntRequest& request, ::rck::SendIntResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendInt_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::SendInt(::grpc::ClientContext* context, const ::rck::SendIntRequest* request, ::rck::SendIntResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendInt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendIntResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendInt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendInt(::grpc::ClientContext* context, const ::rck::SendIntRequest* request, ::rck::SendIntResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendInt_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::SendInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendIntResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendInt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::SendIntResult>* RemoteComputationKernel::Stub::AsyncSendIntRaw(::grpc::ClientContext* context, const ::rck::SendIntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendIntResult>::Create(channel_.get(), cq, rpcmethod_SendInt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::SendIntResult>* RemoteComputationKernel::Stub::PrepareAsyncSendIntRaw(::grpc::ClientContext* context, const ::rck::SendIntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendIntResult>::Create(channel_.get(), cq, rpcmethod_SendInt_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::SendFlt(::grpc::ClientContext* context, const ::rck::SendFltRequest& request, ::rck::SendFltResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendFlt_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::SendFlt(::grpc::ClientContext* context, const ::rck::SendFltRequest* request, ::rck::SendFltResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendFlt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendFlt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendFltResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendFlt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendFlt(::grpc::ClientContext* context, const ::rck::SendFltRequest* request, ::rck::SendFltResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendFlt_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::SendFlt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendFltResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendFlt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::SendFltResult>* RemoteComputationKernel::Stub::AsyncSendFltRaw(::grpc::ClientContext* context, const ::rck::SendFltRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendFltResult>::Create(channel_.get(), cq, rpcmethod_SendFlt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::SendFltResult>* RemoteComputationKernel::Stub::PrepareAsyncSendFltRaw(::grpc::ClientContext* context, const ::rck::SendFltRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendFltResult>::Create(channel_.get(), cq, rpcmethod_SendFlt_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::SendDbl(::grpc::ClientContext* context, const ::rck::SendDblRequest& request, ::rck::SendDblResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendDbl_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::SendDbl(::grpc::ClientContext* context, const ::rck::SendDblRequest* request, ::rck::SendDblResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendDbl_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendDbl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendDblResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendDbl_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::SendDbl(::grpc::ClientContext* context, const ::rck::SendDblRequest* request, ::rck::SendDblResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendDbl_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::SendDbl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::SendDblResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendDbl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::SendDblResult>* RemoteComputationKernel::Stub::AsyncSendDblRaw(::grpc::ClientContext* context, const ::rck::SendDblRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendDblResult>::Create(channel_.get(), cq, rpcmethod_SendDbl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::SendDblResult>* RemoteComputationKernel::Stub::PrepareAsyncSendDblRaw(::grpc::ClientContext* context, const ::rck::SendDblRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::SendDblResult>::Create(channel_.get(), cq, rpcmethod_SendDbl_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::RecvInt(::grpc::ClientContext* context, const ::rck::RecvIntRequest& request, ::rck::RecvIntResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecvInt_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::RecvInt(::grpc::ClientContext* context, const ::rck::RecvIntRequest* request, ::rck::RecvIntResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvInt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvIntResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvInt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvInt(::grpc::ClientContext* context, const ::rck::RecvIntRequest* request, ::rck::RecvIntResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvInt_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::RecvInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvIntResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvInt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvIntResult>* RemoteComputationKernel::Stub::AsyncRecvIntRaw(::grpc::ClientContext* context, const ::rck::RecvIntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvIntResult>::Create(channel_.get(), cq, rpcmethod_RecvInt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvIntResult>* RemoteComputationKernel::Stub::PrepareAsyncRecvIntRaw(::grpc::ClientContext* context, const ::rck::RecvIntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvIntResult>::Create(channel_.get(), cq, rpcmethod_RecvInt_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::RecvFlt(::grpc::ClientContext* context, const ::rck::RecvFltRequest& request, ::rck::RecvFltResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecvFlt_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::RecvFlt(::grpc::ClientContext* context, const ::rck::RecvFltRequest* request, ::rck::RecvFltResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvFlt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvFlt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvFltResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvFlt_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvFlt(::grpc::ClientContext* context, const ::rck::RecvFltRequest* request, ::rck::RecvFltResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvFlt_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::RecvFlt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvFltResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvFlt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvFltResult>* RemoteComputationKernel::Stub::AsyncRecvFltRaw(::grpc::ClientContext* context, const ::rck::RecvFltRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvFltResult>::Create(channel_.get(), cq, rpcmethod_RecvFlt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvFltResult>* RemoteComputationKernel::Stub::PrepareAsyncRecvFltRaw(::grpc::ClientContext* context, const ::rck::RecvFltRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvFltResult>::Create(channel_.get(), cq, rpcmethod_RecvFlt_, context, request, false);
}

::grpc::Status RemoteComputationKernel::Stub::RecvDbl(::grpc::ClientContext* context, const ::rck::RecvDblRequest& request, ::rck::RecvDblResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecvDbl_, context, request, response);
}

void RemoteComputationKernel::Stub::experimental_async::RecvDbl(::grpc::ClientContext* context, const ::rck::RecvDblRequest* request, ::rck::RecvDblResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvDbl_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvDbl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvDblResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecvDbl_, context, request, response, std::move(f));
}

void RemoteComputationKernel::Stub::experimental_async::RecvDbl(::grpc::ClientContext* context, const ::rck::RecvDblRequest* request, ::rck::RecvDblResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvDbl_, context, request, response, reactor);
}

void RemoteComputationKernel::Stub::experimental_async::RecvDbl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rck::RecvDblResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecvDbl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvDblResult>* RemoteComputationKernel::Stub::AsyncRecvDblRaw(::grpc::ClientContext* context, const ::rck::RecvDblRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvDblResult>::Create(channel_.get(), cq, rpcmethod_RecvDbl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rck::RecvDblResult>* RemoteComputationKernel::Stub::PrepareAsyncRecvDblRaw(::grpc::ClientContext* context, const ::rck::RecvDblRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rck::RecvDblResult>::Create(channel_.get(), cq, rpcmethod_RecvDbl_, context, request, false);
}

RemoteComputationKernel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::ResetRequest, ::rck::ResetResult>(
          std::mem_fn(&RemoteComputationKernel::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::AlocVarRequest, ::rck::AlocVarResult>(
          std::mem_fn(&RemoteComputationKernel::Service::AlocVar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::FreeVarRequest, ::rck::FreeVarResult>(
          std::mem_fn(&RemoteComputationKernel::Service::FreeVar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::SendIntRequest, ::rck::SendIntResult>(
          std::mem_fn(&RemoteComputationKernel::Service::SendInt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::SendFltRequest, ::rck::SendFltResult>(
          std::mem_fn(&RemoteComputationKernel::Service::SendFlt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::SendDblRequest, ::rck::SendDblResult>(
          std::mem_fn(&RemoteComputationKernel::Service::SendDbl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::RecvIntRequest, ::rck::RecvIntResult>(
          std::mem_fn(&RemoteComputationKernel::Service::RecvInt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::RecvFltRequest, ::rck::RecvFltResult>(
          std::mem_fn(&RemoteComputationKernel::Service::RecvFlt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteComputationKernel_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteComputationKernel::Service, ::rck::RecvDblRequest, ::rck::RecvDblResult>(
          std::mem_fn(&RemoteComputationKernel::Service::RecvDbl), this)));
}

RemoteComputationKernel::Service::~Service() {
}

::grpc::Status RemoteComputationKernel::Service::Reset(::grpc::ServerContext* context, const ::rck::ResetRequest* request, ::rck::ResetResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::AlocVar(::grpc::ServerContext* context, const ::rck::AlocVarRequest* request, ::rck::AlocVarResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::FreeVar(::grpc::ServerContext* context, const ::rck::FreeVarRequest* request, ::rck::FreeVarResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::SendInt(::grpc::ServerContext* context, const ::rck::SendIntRequest* request, ::rck::SendIntResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::SendFlt(::grpc::ServerContext* context, const ::rck::SendFltRequest* request, ::rck::SendFltResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::SendDbl(::grpc::ServerContext* context, const ::rck::SendDblRequest* request, ::rck::SendDblResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::RecvInt(::grpc::ServerContext* context, const ::rck::RecvIntRequest* request, ::rck::RecvIntResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::RecvFlt(::grpc::ServerContext* context, const ::rck::RecvFltRequest* request, ::rck::RecvFltResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteComputationKernel::Service::RecvDbl(::grpc::ServerContext* context, const ::rck::RecvDblRequest* request, ::rck::RecvDblResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rck

