// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remoteComputationKernel.proto

#include "remoteComputationKernel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rck {
class ResetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetRequest> _instance;
} _ResetRequest_default_instance_;
class ResetResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetResult> _instance;
} _ResetResult_default_instance_;
class AlocVarRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlocVarRequest> _instance;
} _AlocVarRequest_default_instance_;
class AlocVarResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlocVarResult> _instance;
} _AlocVarResult_default_instance_;
class FreeVarRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreeVarRequest> _instance;
} _FreeVarRequest_default_instance_;
class FreeVarResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreeVarResult> _instance;
} _FreeVarResult_default_instance_;
class SendIntRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendIntRequest> _instance;
} _SendIntRequest_default_instance_;
class SendIntResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendIntResult> _instance;
} _SendIntResult_default_instance_;
class SendFltRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendFltRequest> _instance;
} _SendFltRequest_default_instance_;
class SendFltResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendFltResult> _instance;
} _SendFltResult_default_instance_;
class SendDblRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendDblRequest> _instance;
} _SendDblRequest_default_instance_;
class SendDblResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendDblResult> _instance;
} _SendDblResult_default_instance_;
class RecvIntRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvIntRequest> _instance;
} _RecvIntRequest_default_instance_;
class RecvIntResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvIntResult> _instance;
} _RecvIntResult_default_instance_;
class RecvFltRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvFltRequest> _instance;
} _RecvFltRequest_default_instance_;
class RecvFltResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvFltResult> _instance;
} _RecvFltResult_default_instance_;
class RecvDblRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvDblRequest> _instance;
} _RecvDblRequest_default_instance_;
class RecvDblResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecvDblResult> _instance;
} _RecvDblResult_default_instance_;
}  // namespace rck
static void InitDefaultsscc_info_AlocVarRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_AlocVarRequest_default_instance_;
    new (ptr) ::rck::AlocVarRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::AlocVarRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlocVarRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlocVarRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_AlocVarResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_AlocVarResult_default_instance_;
    new (ptr) ::rck::AlocVarResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::AlocVarResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlocVarResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlocVarResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_FreeVarRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_FreeVarRequest_default_instance_;
    new (ptr) ::rck::FreeVarRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::FreeVarRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreeVarRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreeVarRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_FreeVarResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_FreeVarResult_default_instance_;
    new (ptr) ::rck::FreeVarResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::FreeVarResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreeVarResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreeVarResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvDblRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvDblRequest_default_instance_;
    new (ptr) ::rck::RecvDblRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvDblRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvDblRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvDblRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvDblResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvDblResult_default_instance_;
    new (ptr) ::rck::RecvDblResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvDblResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvDblResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvDblResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvFltRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvFltRequest_default_instance_;
    new (ptr) ::rck::RecvFltRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvFltRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvFltRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvFltRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvFltResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvFltResult_default_instance_;
    new (ptr) ::rck::RecvFltResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvFltResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvFltResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvFltResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvIntRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvIntRequest_default_instance_;
    new (ptr) ::rck::RecvIntRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvIntRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvIntRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvIntRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_RecvIntResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_RecvIntResult_default_instance_;
    new (ptr) ::rck::RecvIntResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::RecvIntResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecvIntResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecvIntResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_ResetRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_ResetRequest_default_instance_;
    new (ptr) ::rck::ResetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::ResetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_ResetResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_ResetResult_default_instance_;
    new (ptr) ::rck::ResetResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::ResetResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendDblRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendDblRequest_default_instance_;
    new (ptr) ::rck::SendDblRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendDblRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendDblRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendDblRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendDblResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendDblResult_default_instance_;
    new (ptr) ::rck::SendDblResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendDblResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendDblResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendDblResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendFltRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendFltRequest_default_instance_;
    new (ptr) ::rck::SendFltRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendFltRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendFltRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendFltRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendFltResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendFltResult_default_instance_;
    new (ptr) ::rck::SendFltResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendFltResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendFltResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendFltResult_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendIntRequest_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendIntRequest_default_instance_;
    new (ptr) ::rck::SendIntRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendIntRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendIntRequest_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendIntRequest_remoteComputationKernel_2eproto}, {}};

static void InitDefaultsscc_info_SendIntResult_remoteComputationKernel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rck::_SendIntResult_default_instance_;
    new (ptr) ::rck::SendIntResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rck::SendIntResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendIntResult_remoteComputationKernel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendIntResult_remoteComputationKernel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remoteComputationKernel_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_remoteComputationKernel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remoteComputationKernel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remoteComputationKernel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::ResetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::ResetResult, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarRequest, dtype_),
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarRequest, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarResult, error_),
  PROTOBUF_FIELD_OFFSET(::rck::AlocVarResult, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::FreeVarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::FreeVarRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::FreeVarResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::FreeVarResult, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendIntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendIntRequest, id_),
  PROTOBUF_FIELD_OFFSET(::rck::SendIntRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendIntResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendIntResult, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendFltRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendFltRequest, id_),
  PROTOBUF_FIELD_OFFSET(::rck::SendFltRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendFltResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendFltResult, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendDblRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendDblRequest, id_),
  PROTOBUF_FIELD_OFFSET(::rck::SendDblRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::SendDblResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::SendDblResult, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvIntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvIntRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvIntResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvIntResult, error_),
  PROTOBUF_FIELD_OFFSET(::rck::RecvIntResult, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvFltRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvFltRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvFltResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvFltResult, error_),
  PROTOBUF_FIELD_OFFSET(::rck::RecvFltResult, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvDblRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvDblRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rck::RecvDblResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rck::RecvDblResult, error_),
  PROTOBUF_FIELD_OFFSET(::rck::RecvDblResult, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rck::ResetRequest)},
  { 5, -1, sizeof(::rck::ResetResult)},
  { 11, -1, sizeof(::rck::AlocVarRequest)},
  { 18, -1, sizeof(::rck::AlocVarResult)},
  { 25, -1, sizeof(::rck::FreeVarRequest)},
  { 31, -1, sizeof(::rck::FreeVarResult)},
  { 37, -1, sizeof(::rck::SendIntRequest)},
  { 44, -1, sizeof(::rck::SendIntResult)},
  { 50, -1, sizeof(::rck::SendFltRequest)},
  { 57, -1, sizeof(::rck::SendFltResult)},
  { 63, -1, sizeof(::rck::SendDblRequest)},
  { 70, -1, sizeof(::rck::SendDblResult)},
  { 76, -1, sizeof(::rck::RecvIntRequest)},
  { 82, -1, sizeof(::rck::RecvIntResult)},
  { 89, -1, sizeof(::rck::RecvFltRequest)},
  { 95, -1, sizeof(::rck::RecvFltResult)},
  { 102, -1, sizeof(::rck::RecvDblRequest)},
  { 108, -1, sizeof(::rck::RecvDblResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_ResetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_ResetResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_AlocVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_AlocVarResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_FreeVarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_FreeVarResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendIntRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendIntResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendFltRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendFltResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendDblRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_SendDblResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvIntRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvIntResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvFltRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvFltResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvDblRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rck::_RecvDblResult_default_instance_),
};

const char descriptor_table_protodef_remoteComputationKernel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035remoteComputationKernel.proto\022\003rck\"\016\n\014"
  "ResetRequest\"\034\n\013ResetResult\022\r\n\005error\030\001 \001"
  "(\005\"3\n\016AlocVarRequest\022\r\n\005dtype\030\001 \001(\005\022\022\n\nd"
  "imensions\030\002 \003(\005\"*\n\rAlocVarResult\022\r\n\005erro"
  "r\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"\034\n\016FreeVarRequest\022\n\n"
  "\002id\030\001 \001(\005\"\036\n\rFreeVarResult\022\r\n\005error\030\001 \001("
  "\005\"*\n\016SendIntRequest\022\n\n\002id\030\001 \001(\005\022\014\n\004data\030"
  "\002 \003(\005\"\036\n\rSendIntResult\022\r\n\005error\030\001 \001(\005\"*\n"
  "\016SendFltRequest\022\n\n\002id\030\001 \001(\005\022\014\n\004data\030\002 \003("
  "\002\"\036\n\rSendFltResult\022\r\n\005error\030\001 \001(\005\"*\n\016Sen"
  "dDblRequest\022\n\n\002id\030\001 \001(\005\022\014\n\004data\030\002 \003(\001\"\036\n"
  "\rSendDblResult\022\r\n\005error\030\001 \001(\005\"\034\n\016RecvInt"
  "Request\022\n\n\002id\030\001 \001(\005\",\n\rRecvIntResult\022\r\n\005"
  "error\030\001 \001(\005\022\014\n\004data\030\002 \003(\005\"\034\n\016RecvFltRequ"
  "est\022\n\n\002id\030\001 \001(\005\",\n\rRecvFltResult\022\r\n\005erro"
  "r\030\001 \001(\005\022\014\n\004data\030\002 \003(\002\"\034\n\016RecvDblRequest\022"
  "\n\n\002id\030\001 \001(\005\",\n\rRecvDblResult\022\r\n\005error\030\001 "
  "\001(\005\022\014\n\004data\030\002 \003(\0012\371\003\n\027RemoteComputationK"
  "ernel\022.\n\005Reset\022\021.rck.ResetRequest\032\020.rck."
  "ResetResult\"\000\0224\n\007AlocVar\022\023.rck.AlocVarRe"
  "quest\032\022.rck.AlocVarResult\"\000\0224\n\007FreeVar\022\023"
  ".rck.FreeVarRequest\032\022.rck.FreeVarResult\""
  "\000\0224\n\007SendInt\022\023.rck.SendIntRequest\032\022.rck."
  "SendIntResult\"\000\0224\n\007SendFlt\022\023.rck.SendFlt"
  "Request\032\022.rck.SendFltResult\"\000\0224\n\007SendDbl"
  "\022\023.rck.SendDblRequest\032\022.rck.SendDblResul"
  "t\"\000\0224\n\007RecvInt\022\023.rck.RecvIntRequest\032\022.rc"
  "k.RecvIntResult\"\000\0224\n\007RecvFlt\022\023.rck.RecvF"
  "ltRequest\032\022.rck.RecvFltResult\"\000\0224\n\007RecvD"
  "bl\022\023.rck.RecvDblRequest\032\022.rck.RecvDblRes"
  "ult\"\000B\025\n\014de.labathomeB\003RCKP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remoteComputationKernel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remoteComputationKernel_2eproto_sccs[18] = {
  &scc_info_AlocVarRequest_remoteComputationKernel_2eproto.base,
  &scc_info_AlocVarResult_remoteComputationKernel_2eproto.base,
  &scc_info_FreeVarRequest_remoteComputationKernel_2eproto.base,
  &scc_info_FreeVarResult_remoteComputationKernel_2eproto.base,
  &scc_info_RecvDblRequest_remoteComputationKernel_2eproto.base,
  &scc_info_RecvDblResult_remoteComputationKernel_2eproto.base,
  &scc_info_RecvFltRequest_remoteComputationKernel_2eproto.base,
  &scc_info_RecvFltResult_remoteComputationKernel_2eproto.base,
  &scc_info_RecvIntRequest_remoteComputationKernel_2eproto.base,
  &scc_info_RecvIntResult_remoteComputationKernel_2eproto.base,
  &scc_info_ResetRequest_remoteComputationKernel_2eproto.base,
  &scc_info_ResetResult_remoteComputationKernel_2eproto.base,
  &scc_info_SendDblRequest_remoteComputationKernel_2eproto.base,
  &scc_info_SendDblResult_remoteComputationKernel_2eproto.base,
  &scc_info_SendFltRequest_remoteComputationKernel_2eproto.base,
  &scc_info_SendFltResult_remoteComputationKernel_2eproto.base,
  &scc_info_SendIntRequest_remoteComputationKernel_2eproto.base,
  &scc_info_SendIntResult_remoteComputationKernel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remoteComputationKernel_2eproto_once;
static bool descriptor_table_remoteComputationKernel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remoteComputationKernel_2eproto = {
  &descriptor_table_remoteComputationKernel_2eproto_initialized, descriptor_table_protodef_remoteComputationKernel_2eproto, "remoteComputationKernel.proto", 1236,
  &descriptor_table_remoteComputationKernel_2eproto_once, descriptor_table_remoteComputationKernel_2eproto_sccs, descriptor_table_remoteComputationKernel_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_remoteComputationKernel_2eproto::offsets,
  file_level_metadata_remoteComputationKernel_2eproto, 18, file_level_enum_descriptors_remoteComputationKernel_2eproto, file_level_service_descriptors_remoteComputationKernel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remoteComputationKernel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remoteComputationKernel_2eproto), true);
namespace rck {

// ===================================================================

void ResetRequest::InitAsDefaultInstance() {
}
class ResetRequest::_Internal {
 public:
};

ResetRequest::ResetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rck.ResetRequest)
}

void ResetRequest::SharedCtor() {
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:rck.ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
}

void ResetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetRequest& ResetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.ResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ResetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.ResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.ResetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.ResetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::InternalSwap(ResetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetResult::InitAsDefaultInstance() {
}
class ResetResult::_Internal {
 public:
};

ResetResult::ResetResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.ResetResult)
}
ResetResult::ResetResult(const ResetResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.ResetResult)
}

void ResetResult::SharedCtor() {
  error_ = 0;
}

ResetResult::~ResetResult() {
  // @@protoc_insertion_point(destructor:rck.ResetResult)
  SharedDtor();
}

void ResetResult::SharedDtor() {
}

void ResetResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetResult& ResetResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void ResetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.ResetResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _internal_metadata_.Clear();
}

const char* ResetResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.ResetResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.ResetResult)
  return target;
}

size_t ResetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.ResetResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.ResetResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.ResetResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.ResetResult)
    MergeFrom(*source);
  }
}

void ResetResult::MergeFrom(const ResetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.ResetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void ResetResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.ResetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResult::CopyFrom(const ResetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.ResetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResult::IsInitialized() const {
  return true;
}

void ResetResult::InternalSwap(ResetResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlocVarRequest::InitAsDefaultInstance() {
}
class AlocVarRequest::_Internal {
 public:
};

AlocVarRequest::AlocVarRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.AlocVarRequest)
}
AlocVarRequest::AlocVarRequest(const AlocVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:rck.AlocVarRequest)
}

void AlocVarRequest::SharedCtor() {
  dtype_ = 0;
}

AlocVarRequest::~AlocVarRequest() {
  // @@protoc_insertion_point(destructor:rck.AlocVarRequest)
  SharedDtor();
}

void AlocVarRequest::SharedDtor() {
}

void AlocVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlocVarRequest& AlocVarRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlocVarRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void AlocVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.AlocVarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  dtype_ = 0;
  _internal_metadata_.Clear();
}

const char* AlocVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlocVarRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.AlocVarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dtype = 1;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dtype(), target);
  }

  // repeated int32 dimensions = 2;
  {
    int byte_size = _dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.AlocVarRequest)
  return target;
}

size_t AlocVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.AlocVarRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dimensions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlocVarRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.AlocVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlocVarRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlocVarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.AlocVarRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.AlocVarRequest)
    MergeFrom(*source);
  }
}

void AlocVarRequest::MergeFrom(const AlocVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.AlocVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void AlocVarRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.AlocVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlocVarRequest::CopyFrom(const AlocVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.AlocVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlocVarRequest::IsInitialized() const {
  return true;
}

void AlocVarRequest::InternalSwap(AlocVarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlocVarRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlocVarResult::InitAsDefaultInstance() {
}
class AlocVarResult::_Internal {
 public:
};

AlocVarResult::AlocVarResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.AlocVarResult)
}
AlocVarResult::AlocVarResult(const AlocVarResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&error_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:rck.AlocVarResult)
}

void AlocVarResult::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(id_));
}

AlocVarResult::~AlocVarResult() {
  // @@protoc_insertion_point(destructor:rck.AlocVarResult)
  SharedDtor();
}

void AlocVarResult::SharedDtor() {
}

void AlocVarResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlocVarResult& AlocVarResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlocVarResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void AlocVarResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.AlocVarResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* AlocVarResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlocVarResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.AlocVarResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.AlocVarResult)
  return target;
}

size_t AlocVarResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.AlocVarResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlocVarResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.AlocVarResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AlocVarResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlocVarResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.AlocVarResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.AlocVarResult)
    MergeFrom(*source);
  }
}

void AlocVarResult::MergeFrom(const AlocVarResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.AlocVarResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AlocVarResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.AlocVarResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlocVarResult::CopyFrom(const AlocVarResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.AlocVarResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlocVarResult::IsInitialized() const {
  return true;
}

void AlocVarResult::InternalSwap(AlocVarResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlocVarResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FreeVarRequest::InitAsDefaultInstance() {
}
class FreeVarRequest::_Internal {
 public:
};

FreeVarRequest::FreeVarRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.FreeVarRequest)
}
FreeVarRequest::FreeVarRequest(const FreeVarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.FreeVarRequest)
}

void FreeVarRequest::SharedCtor() {
  id_ = 0;
}

FreeVarRequest::~FreeVarRequest() {
  // @@protoc_insertion_point(destructor:rck.FreeVarRequest)
  SharedDtor();
}

void FreeVarRequest::SharedDtor() {
}

void FreeVarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreeVarRequest& FreeVarRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreeVarRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void FreeVarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.FreeVarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* FreeVarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeVarRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.FreeVarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.FreeVarRequest)
  return target;
}

size_t FreeVarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.FreeVarRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreeVarRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.FreeVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeVarRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreeVarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.FreeVarRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.FreeVarRequest)
    MergeFrom(*source);
  }
}

void FreeVarRequest::MergeFrom(const FreeVarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.FreeVarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FreeVarRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.FreeVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeVarRequest::CopyFrom(const FreeVarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.FreeVarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeVarRequest::IsInitialized() const {
  return true;
}

void FreeVarRequest::InternalSwap(FreeVarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeVarRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FreeVarResult::InitAsDefaultInstance() {
}
class FreeVarResult::_Internal {
 public:
};

FreeVarResult::FreeVarResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.FreeVarResult)
}
FreeVarResult::FreeVarResult(const FreeVarResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.FreeVarResult)
}

void FreeVarResult::SharedCtor() {
  error_ = 0;
}

FreeVarResult::~FreeVarResult() {
  // @@protoc_insertion_point(destructor:rck.FreeVarResult)
  SharedDtor();
}

void FreeVarResult::SharedDtor() {
}

void FreeVarResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreeVarResult& FreeVarResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreeVarResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void FreeVarResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.FreeVarResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _internal_metadata_.Clear();
}

const char* FreeVarResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreeVarResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.FreeVarResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.FreeVarResult)
  return target;
}

size_t FreeVarResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.FreeVarResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreeVarResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.FreeVarResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeVarResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreeVarResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.FreeVarResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.FreeVarResult)
    MergeFrom(*source);
  }
}

void FreeVarResult::MergeFrom(const FreeVarResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.FreeVarResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void FreeVarResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.FreeVarResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeVarResult::CopyFrom(const FreeVarResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.FreeVarResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeVarResult::IsInitialized() const {
  return true;
}

void FreeVarResult::InternalSwap(FreeVarResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreeVarResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendIntRequest::InitAsDefaultInstance() {
}
class SendIntRequest::_Internal {
 public:
};

SendIntRequest::SendIntRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendIntRequest)
}
SendIntRequest::SendIntRequest(const SendIntRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.SendIntRequest)
}

void SendIntRequest::SharedCtor() {
  id_ = 0;
}

SendIntRequest::~SendIntRequest() {
  // @@protoc_insertion_point(destructor:rck.SendIntRequest)
  SharedDtor();
}

void SendIntRequest::SharedDtor() {
}

void SendIntRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendIntRequest& SendIntRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendIntRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendIntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* SendIntRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendIntRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 data = 2;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendIntRequest)
  return target;
}

size_t SendIntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendIntRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendIntRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendIntRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendIntRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendIntRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendIntRequest)
    MergeFrom(*source);
  }
}

void SendIntRequest::MergeFrom(const SendIntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SendIntRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendIntRequest::CopyFrom(const SendIntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendIntRequest::IsInitialized() const {
  return true;
}

void SendIntRequest::InternalSwap(SendIntRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendIntRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendIntResult::InitAsDefaultInstance() {
}
class SendIntResult::_Internal {
 public:
};

SendIntResult::SendIntResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendIntResult)
}
SendIntResult::SendIntResult(const SendIntResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.SendIntResult)
}

void SendIntResult::SharedCtor() {
  error_ = 0;
}

SendIntResult::~SendIntResult() {
  // @@protoc_insertion_point(destructor:rck.SendIntResult)
  SharedDtor();
}

void SendIntResult::SharedDtor() {
}

void SendIntResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendIntResult& SendIntResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendIntResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendIntResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendIntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _internal_metadata_.Clear();
}

const char* SendIntResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendIntResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendIntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendIntResult)
  return target;
}

size_t SendIntResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendIntResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendIntResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendIntResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SendIntResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendIntResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendIntResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendIntResult)
    MergeFrom(*source);
  }
}

void SendIntResult::MergeFrom(const SendIntResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendIntResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SendIntResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendIntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendIntResult::CopyFrom(const SendIntResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendIntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendIntResult::IsInitialized() const {
  return true;
}

void SendIntResult::InternalSwap(SendIntResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendIntResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendFltRequest::InitAsDefaultInstance() {
}
class SendFltRequest::_Internal {
 public:
};

SendFltRequest::SendFltRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendFltRequest)
}
SendFltRequest::SendFltRequest(const SendFltRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.SendFltRequest)
}

void SendFltRequest::SharedCtor() {
  id_ = 0;
}

SendFltRequest::~SendFltRequest() {
  // @@protoc_insertion_point(destructor:rck.SendFltRequest)
  SharedDtor();
}

void SendFltRequest::SharedDtor() {
}

void SendFltRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendFltRequest& SendFltRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendFltRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendFltRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendFltRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* SendFltRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendFltRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendFltRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated float data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendFltRequest)
  return target;
}

size_t SendFltRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendFltRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendFltRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendFltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFltRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendFltRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendFltRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendFltRequest)
    MergeFrom(*source);
  }
}

void SendFltRequest::MergeFrom(const SendFltRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendFltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SendFltRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendFltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFltRequest::CopyFrom(const SendFltRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendFltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFltRequest::IsInitialized() const {
  return true;
}

void SendFltRequest::InternalSwap(SendFltRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFltRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendFltResult::InitAsDefaultInstance() {
}
class SendFltResult::_Internal {
 public:
};

SendFltResult::SendFltResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendFltResult)
}
SendFltResult::SendFltResult(const SendFltResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.SendFltResult)
}

void SendFltResult::SharedCtor() {
  error_ = 0;
}

SendFltResult::~SendFltResult() {
  // @@protoc_insertion_point(destructor:rck.SendFltResult)
  SharedDtor();
}

void SendFltResult::SharedDtor() {
}

void SendFltResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendFltResult& SendFltResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendFltResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendFltResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendFltResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _internal_metadata_.Clear();
}

const char* SendFltResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendFltResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendFltResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendFltResult)
  return target;
}

size_t SendFltResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendFltResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendFltResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendFltResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFltResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendFltResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendFltResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendFltResult)
    MergeFrom(*source);
  }
}

void SendFltResult::MergeFrom(const SendFltResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendFltResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SendFltResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendFltResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFltResult::CopyFrom(const SendFltResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendFltResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFltResult::IsInitialized() const {
  return true;
}

void SendFltResult::InternalSwap(SendFltResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendFltResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendDblRequest::InitAsDefaultInstance() {
}
class SendDblRequest::_Internal {
 public:
};

SendDblRequest::SendDblRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendDblRequest)
}
SendDblRequest::SendDblRequest(const SendDblRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.SendDblRequest)
}

void SendDblRequest::SharedCtor() {
  id_ = 0;
}

SendDblRequest::~SendDblRequest() {
  // @@protoc_insertion_point(destructor:rck.SendDblRequest)
  SharedDtor();
}

void SendDblRequest::SharedDtor() {
}

void SendDblRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendDblRequest& SendDblRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendDblRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendDblRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendDblRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* SendDblRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendDblRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendDblRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendDblRequest)
  return target;
}

size_t SendDblRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendDblRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendDblRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendDblRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendDblRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendDblRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendDblRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendDblRequest)
    MergeFrom(*source);
  }
}

void SendDblRequest::MergeFrom(const SendDblRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendDblRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SendDblRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendDblRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDblRequest::CopyFrom(const SendDblRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendDblRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDblRequest::IsInitialized() const {
  return true;
}

void SendDblRequest::InternalSwap(SendDblRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendDblRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendDblResult::InitAsDefaultInstance() {
}
class SendDblResult::_Internal {
 public:
};

SendDblResult::SendDblResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.SendDblResult)
}
SendDblResult::SendDblResult(const SendDblResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.SendDblResult)
}

void SendDblResult::SharedCtor() {
  error_ = 0;
}

SendDblResult::~SendDblResult() {
  // @@protoc_insertion_point(destructor:rck.SendDblResult)
  SharedDtor();
}

void SendDblResult::SharedDtor() {
}

void SendDblResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendDblResult& SendDblResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendDblResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void SendDblResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.SendDblResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 0;
  _internal_metadata_.Clear();
}

const char* SendDblResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendDblResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.SendDblResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.SendDblResult)
  return target;
}

size_t SendDblResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.SendDblResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendDblResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.SendDblResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SendDblResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendDblResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.SendDblResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.SendDblResult)
    MergeFrom(*source);
  }
}

void SendDblResult::MergeFrom(const SendDblResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.SendDblResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void SendDblResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.SendDblResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDblResult::CopyFrom(const SendDblResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.SendDblResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDblResult::IsInitialized() const {
  return true;
}

void SendDblResult::InternalSwap(SendDblResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendDblResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvIntRequest::InitAsDefaultInstance() {
}
class RecvIntRequest::_Internal {
 public:
};

RecvIntRequest::RecvIntRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvIntRequest)
}
RecvIntRequest::RecvIntRequest(const RecvIntRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvIntRequest)
}

void RecvIntRequest::SharedCtor() {
  id_ = 0;
}

RecvIntRequest::~RecvIntRequest() {
  // @@protoc_insertion_point(destructor:rck.RecvIntRequest)
  SharedDtor();
}

void RecvIntRequest::SharedDtor() {
}

void RecvIntRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvIntRequest& RecvIntRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvIntRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvIntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvIntRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvIntRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvIntRequest)
  return target;
}

size_t RecvIntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvIntRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvIntRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvIntRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvIntRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvIntRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvIntRequest)
    MergeFrom(*source);
  }
}

void RecvIntRequest::MergeFrom(const RecvIntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RecvIntRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvIntRequest::CopyFrom(const RecvIntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvIntRequest::IsInitialized() const {
  return true;
}

void RecvIntRequest::InternalSwap(RecvIntRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvIntRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvIntResult::InitAsDefaultInstance() {
}
class RecvIntResult::_Internal {
 public:
};

RecvIntResult::RecvIntResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvIntResult)
}
RecvIntResult::RecvIntResult(const RecvIntResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvIntResult)
}

void RecvIntResult::SharedCtor() {
  error_ = 0;
}

RecvIntResult::~RecvIntResult() {
  // @@protoc_insertion_point(destructor:rck.RecvIntResult)
  SharedDtor();
}

void RecvIntResult::SharedDtor() {
}

void RecvIntResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvIntResult& RecvIntResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvIntResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvIntResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvIntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvIntResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvIntResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvIntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated int32 data = 2;
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvIntResult)
  return target;
}

size_t RecvIntResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvIntResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvIntResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvIntResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvIntResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvIntResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvIntResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvIntResult)
    MergeFrom(*source);
  }
}

void RecvIntResult::MergeFrom(const RecvIntResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvIntResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void RecvIntResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvIntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvIntResult::CopyFrom(const RecvIntResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvIntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvIntResult::IsInitialized() const {
  return true;
}

void RecvIntResult::InternalSwap(RecvIntResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvIntResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvFltRequest::InitAsDefaultInstance() {
}
class RecvFltRequest::_Internal {
 public:
};

RecvFltRequest::RecvFltRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvFltRequest)
}
RecvFltRequest::RecvFltRequest(const RecvFltRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvFltRequest)
}

void RecvFltRequest::SharedCtor() {
  id_ = 0;
}

RecvFltRequest::~RecvFltRequest() {
  // @@protoc_insertion_point(destructor:rck.RecvFltRequest)
  SharedDtor();
}

void RecvFltRequest::SharedDtor() {
}

void RecvFltRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvFltRequest& RecvFltRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvFltRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvFltRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvFltRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvFltRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvFltRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvFltRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvFltRequest)
  return target;
}

size_t RecvFltRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvFltRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvFltRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvFltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvFltRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvFltRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvFltRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvFltRequest)
    MergeFrom(*source);
  }
}

void RecvFltRequest::MergeFrom(const RecvFltRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvFltRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RecvFltRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvFltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvFltRequest::CopyFrom(const RecvFltRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvFltRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvFltRequest::IsInitialized() const {
  return true;
}

void RecvFltRequest::InternalSwap(RecvFltRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvFltRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvFltResult::InitAsDefaultInstance() {
}
class RecvFltResult::_Internal {
 public:
};

RecvFltResult::RecvFltResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvFltResult)
}
RecvFltResult::RecvFltResult(const RecvFltResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvFltResult)
}

void RecvFltResult::SharedCtor() {
  error_ = 0;
}

RecvFltResult::~RecvFltResult() {
  // @@protoc_insertion_point(destructor:rck.RecvFltResult)
  SharedDtor();
}

void RecvFltResult::SharedDtor() {
}

void RecvFltResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvFltResult& RecvFltResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvFltResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvFltResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvFltResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvFltResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvFltResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvFltResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated float data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvFltResult)
  return target;
}

size_t RecvFltResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvFltResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvFltResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvFltResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvFltResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvFltResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvFltResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvFltResult)
    MergeFrom(*source);
  }
}

void RecvFltResult::MergeFrom(const RecvFltResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvFltResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void RecvFltResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvFltResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvFltResult::CopyFrom(const RecvFltResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvFltResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvFltResult::IsInitialized() const {
  return true;
}

void RecvFltResult::InternalSwap(RecvFltResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvFltResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvDblRequest::InitAsDefaultInstance() {
}
class RecvDblRequest::_Internal {
 public:
};

RecvDblRequest::RecvDblRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvDblRequest)
}
RecvDblRequest::RecvDblRequest(const RecvDblRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvDblRequest)
}

void RecvDblRequest::SharedCtor() {
  id_ = 0;
}

RecvDblRequest::~RecvDblRequest() {
  // @@protoc_insertion_point(destructor:rck.RecvDblRequest)
  SharedDtor();
}

void RecvDblRequest::SharedDtor() {
}

void RecvDblRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvDblRequest& RecvDblRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvDblRequest_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvDblRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvDblRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvDblRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvDblRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvDblRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvDblRequest)
  return target;
}

size_t RecvDblRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvDblRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvDblRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvDblRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvDblRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvDblRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvDblRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvDblRequest)
    MergeFrom(*source);
  }
}

void RecvDblRequest::MergeFrom(const RecvDblRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvDblRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RecvDblRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvDblRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvDblRequest::CopyFrom(const RecvDblRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvDblRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvDblRequest::IsInitialized() const {
  return true;
}

void RecvDblRequest::InternalSwap(RecvDblRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvDblRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecvDblResult::InitAsDefaultInstance() {
}
class RecvDblResult::_Internal {
 public:
};

RecvDblResult::RecvDblResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rck.RecvDblResult)
}
RecvDblResult::RecvDblResult(const RecvDblResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:rck.RecvDblResult)
}

void RecvDblResult::SharedCtor() {
  error_ = 0;
}

RecvDblResult::~RecvDblResult() {
  // @@protoc_insertion_point(destructor:rck.RecvDblResult)
  SharedDtor();
}

void RecvDblResult::SharedDtor() {
}

void RecvDblResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecvDblResult& RecvDblResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecvDblResult_remoteComputationKernel_2eproto.base);
  return *internal_default_instance();
}


void RecvDblResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rck.RecvDblResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

const char* RecvDblResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecvDblResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rck.RecvDblResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // repeated double data = 2;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rck.RecvDblResult)
  return target;
}

size_t RecvDblResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rck.RecvDblResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecvDblResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rck.RecvDblResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvDblResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecvDblResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rck.RecvDblResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rck.RecvDblResult)
    MergeFrom(*source);
  }
}

void RecvDblResult::MergeFrom(const RecvDblResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rck.RecvDblResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void RecvDblResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rck.RecvDblResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvDblResult::CopyFrom(const RecvDblResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rck.RecvDblResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvDblResult::IsInitialized() const {
  return true;
}

void RecvDblResult::InternalSwap(RecvDblResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecvDblResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rck
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rck::ResetRequest* Arena::CreateMaybeMessage< ::rck::ResetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::ResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::ResetResult* Arena::CreateMaybeMessage< ::rck::ResetResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::ResetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::AlocVarRequest* Arena::CreateMaybeMessage< ::rck::AlocVarRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::AlocVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::AlocVarResult* Arena::CreateMaybeMessage< ::rck::AlocVarResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::AlocVarResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::FreeVarRequest* Arena::CreateMaybeMessage< ::rck::FreeVarRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::FreeVarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::FreeVarResult* Arena::CreateMaybeMessage< ::rck::FreeVarResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::FreeVarResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendIntRequest* Arena::CreateMaybeMessage< ::rck::SendIntRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendIntRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendIntResult* Arena::CreateMaybeMessage< ::rck::SendIntResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendIntResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendFltRequest* Arena::CreateMaybeMessage< ::rck::SendFltRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendFltRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendFltResult* Arena::CreateMaybeMessage< ::rck::SendFltResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendFltResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendDblRequest* Arena::CreateMaybeMessage< ::rck::SendDblRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendDblRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::SendDblResult* Arena::CreateMaybeMessage< ::rck::SendDblResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::SendDblResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvIntRequest* Arena::CreateMaybeMessage< ::rck::RecvIntRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvIntRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvIntResult* Arena::CreateMaybeMessage< ::rck::RecvIntResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvIntResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvFltRequest* Arena::CreateMaybeMessage< ::rck::RecvFltRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvFltRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvFltResult* Arena::CreateMaybeMessage< ::rck::RecvFltResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvFltResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvDblRequest* Arena::CreateMaybeMessage< ::rck::RecvDblRequest >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvDblRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rck::RecvDblResult* Arena::CreateMaybeMessage< ::rck::RecvDblResult >(Arena* arena) {
  return Arena::CreateInternal< ::rck::RecvDblResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
